name: Test

on:
  - push
  - pull_request

defaults:
  run:
    shell: bash

jobs:
  test:
    runs-on: ${{ matrix.env.os }}

    strategy:
      fail-fast: false
      matrix:
        env:
          - os: ubuntu-latest
            cache: ~/.cache/deno
          - os: macos-latest
            cache: ~/Library/Caches/deno
          - os: windows-latest
            cache: ~/AppData/Local/deno

    steps:
      - uses: actions/checkout@v2
      - name: Cache
        timeout-minutes: 1
        continue-on-error: true
        uses: actions/cache@v2.1.4
        with:
          path: ${{ matrix.env.cache }}
          key: deno-${{ runner.os }}-${{ hashFiles('{lib,utils}/{std,x}/**/*.ts') }}
          restore-keys: |
            deno-${{ runner.os }}-${{ hashFiles('{lib,utils}/{std,x}/**/*.ts') }}
            deno-${{ runner.os }}-
            deno-
      - name: Install Deno
        uses: denolib/setup-deno@v2.3.0
        with:
          deno-version: 1.8.0
      - name: Refresh cache
        run: deno cache --unstable **/*.{ts,js}
      - name: Test
        run: deno test --unstable --allow-all scripts/test.ts
      - name: Prepare for uploading deno cache as artifacts
        env:
          SOURCE: ${{ matrix.env.cache }}
          TARGET: deno-cache.${{ matrix.env.os }}.tmp
        run: |
          eval "source=$SOURCE"
          cp -r "$source" "$TARGET"
      - name: Upload deno cache as artifacts
        uses: actions/upload-artifact@v2.2.2
        with:
          name: deno-cache.${{ matrix.env.os }}
          path: deno-cache.${{ matrix.env.os }}.tmp
